#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_hostname() {
  echo 'Enter new hostname of the machine (e.g. macbook-paulmillr)'
    read hostname
    echo "Setting new hostname to $hostname..."
    scutil --set HostName "$hostname"
    compname=$(sudo scutil --get HostName | tr '-' '.')
    echo "Setting computer name to $compname"
    scutil --set ComputerName "$compname"
}

setup_sshkey() {
  echo 'Checking for SSH key, generating one if it does not exist...'
    [[ -f '~/.ssh/id_rsa.pub' ]] || ssh-keygen -t rsa

  echo 'Copying public key to clipboard. Paste it into your Github account...'
    [[ -f '~/.ssh/id_rsa.pub' ]] && cat '~/.ssh/id_rsa.pub' | pbcopy
    open 'https://github.com/account/ssh'
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false


  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"

    overwrite=
    backup=
    skip=

    if [ -f "$dst" ] || [ -d "$dst" ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf "$dst"
        success "removed $dst"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv "$dst" "${dst}.backup"
        success "moved $dst to ${dst}.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        success "skipped $src"
      fi

    if [ "$skip" != "true" ]  # "false" or empty
    then
      ln -s "$1" "$2"
      success "linked $1 to $2"
    fi

  done
}

open_apps() {
  echo 'Install apps:'
  echo 'Adium:'
  open https://adium.im/
  echo 'Alfred:'
  open http://www.alfredapp.com/
  echo 'Canary:'
  open https://www.google.com/intl/en/chrome/browser/canary.html
  echo 'Chrome:'
  open https://www.google.com/intl/en/chrome/browser/
  echo 'Clear:'
  open http://www.realmacsoftware.com/clear/
  echo 'DaisyDisk:'
  open http://www.daisydiskapp.com/
  echo 'Decelerator:'
  open https://itunes.apple.com/us/app/decelerate/id449448909
  echo 'Divvy:'
  open http://mizage.com/divvy/
  echo 'Dropbox:'
  open https://www.dropbox.com
  echo 'Evernote:'
  open https://evernote.com/evernote/
  echo 'Fluid App + Trello + Google Calendar'
  open http://fluidapp.com/
  open https://trello.com/
  open http://calendar.google.com
  echo 'Flux:'
  open http://justgetflux.com/
  echo 'Jitouch:'
  open http://www.jitouch.com/
  echo 'Little Snapper aka Ember:'
  open http://realmacsoftware.com/ember
  echo 'Memory Clean:'
  open https://itunes.apple.com/us/app/memory-clean/id451444120
  echo 'Path Finder:'
  open http://www.cocoatech.com/pathfinder/
  echo 'Pocket:'
  open http://getpocket.com/
  echo 'Skype:'
  open http://www.skype.com/en/download-skype/skype-for-computer/
  echo 'Sparrow:'
  open http://sparrowmailapp.com/
  echo 'Spotify'
  open https://www.spotify.com/
  echo 'Tower:'
  open http://www.git-tower.com
  echo 'Transmission:'
  open http://www.transmissionbt.com
  echo 'Transmit:'
  open https://panic.com/transmit/
  echo 'Twitterific:'
  open http://twitterrific.com/ios
  echo 'VLC:'
  open http://www.videolan.org/vlc/index.html
}

setup_hostname
setup_sshkey
setup_gitconfig
install_dotfiles
open_apps

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if src bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

ZSH_ROOT="`which zsh`"
echo 'Setting zsh as default shell...'
chsh -s '$ZSH_ROOT'

echo ''
echo '  All installed!'
